# -*- coding: utf-8 -*-
import urllib  
import urllib2  
from urllib import urlencode 
import json
import re
import datetime
import web
import product.iconfig as icfg
from math import *
# This class provides the functionality we want. You only need to look at
# this if you want to know how this works. It only needs to be defined
# once, no need to muck around with its internals.
class switch(object):
    def __init__(self, value):
        self.value = value
        self.fall = False
    def __iter__(self):
        """Return the match method once, then stop"""
        yield self.match
        raise StopIteration
    def match(self, *args):
        """Indicate whether or not to enter a case suite"""
        if self.fall or not args:
            return True
        elif self.value in args: # changed for v1.5, see below
            self.fall = True
            return True
        else:
            return False

#处理act字段内容/m/person?act2=cert-DISTRIBUTOR_idCard_$cfgPara['idCard']
def get_act(data):
    if data.has_key('act'):
        act = data.act.encode('utf-8')
        m = re.match(r'(\w+)_(\d+)$', act)
        if m is not None:
            act = m.group(1)
            act_para = m.group(2) 
    elif data.has_key('act2'):#来自auth的请求
        act= data.act2.encode('utf-8').split('_')[0]
    else:
        act=""
    return act.upper()

#来自auth的请求
def getAct2Value(act2):
    temp = act2.split("_")
    val = (temp[2] if len(temp)==3 else None)
    return val

def get_data_value(data,key,default=None):
    if data.has_key(key):
        val = data[key]
    elif data.has_key("act2"):
        val = getAct2Value(data.act2)
    else:
        val = default
    return val

def formatPostMsg(cfgPara):
    web.header('Content-Type', 'application/json')
    ret =json.dumps(cfgPara,ensure_ascii=False)
    return ret
    
def secondsFormat(seconds):
    day = int(seconds/(60*60*24))
    hour =int((seconds%(60*60*24))/(60*60))
    min  =int(((seconds%(60*60*24))%(60*60))/60)
    second  =int(((seconds%(60*60*24))%(60*60))%60)
    ret = ""
    if day > 0:
        ret=ret+'{0}天 '.format(day)
    if hour>0:
        ret=ret+'{0}时'.format(hour)
    if min>0:
        ret=ret+'{0}分'.format(min)
    else:
        ret=ret+'{0}秒'.format(second)
    return ret
    
    
def secondsFormat2(seconds):
    day = int(seconds/(60*60*24))
    hour =int((seconds%(60*60*24))/(60*60))
    min  =int(((seconds%(60*60*24))%(60*60))/60)
    second  =int(((seconds%(60*60*24))%(60*60))%60)
    ret = ""
    if day > 0:
        ret=ret+'{0}天 '.format(day)
    ret=ret+'%02d:%02d:%02d'%(hour,min,second)    
    return ret
    
    




def getDistance(Lat_A, Lng_A, Lat_B, Lng_B): # 经度1，纬度1，经度2，纬度2 （十进制度数）  
    if Lat_A==Lat_B and Lng_A==Lng_B:
        distance = 0
    else:
        ra = 6378.140  # 赤道半径 (km)
        rb = 6356.755  # 极半径 (km)
        flatten = (ra - rb) / ra  # 地球扁率
        rad_lat_A = radians(Lat_A)
        rad_lng_A = radians(Lng_A)
        rad_lat_B = radians(Lat_B)
        rad_lng_B = radians(Lng_B)
        pA = atan(rb / ra * tan(rad_lat_A))
        pB = atan(rb / ra * tan(rad_lat_B))
        
        exceptFlag = False
        xx = acos(sin(pA) * sin(pB) + cos(pA) * cos(pB) * cos(rad_lng_A - rad_lng_B))
            
        if cos(xx / 2) ==0 or sin(xx / 2) == 0:
            distance = 0
        else:
            c1 = (sin(xx) - xx) * (sin(pA) + sin(pB)) ** 2 / cos(xx / 2) ** 2
            c2 = (sin(xx) + xx) * (sin(pA) - sin(pB)) ** 2 / sin(xx / 2) ** 2
            dr = flatten / 8 * (c1 - c2)
            distance = ra * (xx + dr)
    return distance

def dbItem2Dict(item,format="orign"):
    temp_item ={}
    for key in item:
        if format=="orign":
            temp_item[key] = item[key]
        else:
            if isinstance(item[key],datetime.datetime):
                timeFormat =("%m-%d %H:%M:%S"  if format=="short_datetime" else "%Y-%m-%d %H:%M:%S")
                temp_item[key] = item[key].strftime(timeFormat)
            elif isinstance(item[key],datetime.date):
                temp_item[key] = item[key].strftime("%Y-%m-%d") 
            elif item[key]==None:
                temp_item[key] = ""
            else:
                temp_item[key]=item[key]
    return temp_item 

def dbItem2JavaAPI(item):
    item = dbItem2Dict(item,format="string")
    _item = {}
    for key in item:
        _item[key] = str(item[key])
    return _item
    