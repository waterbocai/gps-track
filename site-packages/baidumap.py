# -*- coding: utf-8 -*-
import web
import urllib  
import urllib2  
from urllib import urlencode 
from product.model.config import db
import requests 
import json  
import sys 
import utility as uTools
reload(sys)  
sys.setdefaultencoding('UTF-8')
AK = "da3UtEAypzQ7EF3t7HTfrFGw"
GpsType ={'gpsAngle'           : 1,
           'gpsMeter'           : 2,
           'sogouAngle'         : 2,
           'googleAngle'        : 3,
           'sosoAngle'          : 3,
           'aliyunAngle'        : 3,
           'mapabcAngle'        : 3,
           'amapAngle'          : 3, 
           'sogouMeter'         : 4,
           'googleMeter'        : 4,
           'sosoMeter'          : 4,
           'aliyunMeter'        : 4,
           'mapabcMeter'        : 4,
           'amapAngle'          : 4,                     
           'baiduAngle'         : 5,
           'baiduMeter'         : 6,
           'mapbar'             : 7,
           '51'                 : 8
           }
class BaiduMap:
    def __init__(self,userMsg=""):
        self.userMsg = userMsg
        self.data = {'output':'json'}
        
    def GET(self):
        data = web.input()
        act  = data.act.upper()
        self.url =(web.ctx.homedomain + web.ctx.env['RAW_URI']).encode("utf-8")
        ret = ""
        if act == 'TRANSLATE':
           ret=  self.translate(data)
        elif act =='GEOCODER':
           ret=  self.geocoder(data)
        return  ret        
        
    
    #"coords":";".join(map(lambda(x,y) : "{1},{0}".format(x,y) ,coords))
    def translate(self,data):
        cfgPara = [{'x':0.0,'y':0.0}]
        #url = BaiduMap.comUrl+"&from={0}&to={1}&coords={2}".format(_from,_to,_coords)
        args  = {"from"  :GpsType[data._from],
                "to"    :GpsType[data._to],
                "coords":data.coords
        }
        r = self.sendCmd('geoconv/v1/',args)
        resp = r.json()
        if resp["status"] != 0:
            r = self.sendCmd('geoconv/v1/',args)
            resp = r.json()
        cfgPara = resp["result"]
        ret =uTools.formatPostMsg(cfgPara)
        return ret 
    
    def cmdURL(self,cmd):
        return "http://api.map.baidu.com/{0}?ak={1}&output=json".format(cmd,self.__class__.AK)
        
    def sendCmd(self,cmd,data):
        ak = self.getAK()  #申请ak
        data["ak"]=ak  
        data["output"]="json"
        url = "http://api.map.baidu.com/{0}".format(cmd)
        ret = requests.get(url,params=data)
        self.releaseAK(ak)  #用完后立即要释放
        return ret
        
    #坐标的类型，目前支持的坐标类型包括：bd09ll（百度经纬度坐标）、gcj02ll（国测局经纬度坐标）、wgs84ll（ GPS经纬度）
    def geocoder(self,data):
        lat  =  data.lat
        lng  =  data.lng
        type =  (data.type if data.has_key("type") else "bd09ll")
        lxxFlag = True #经纬参数合法性检测
        if lat=="" or lng=="" or float(lat)==0 or float(lng)==0:
            print("geocoder(lat,lng)：参数非法({0},{1})".format(lat,lng))
            return "未知"
            
        data = {"location":"{0},{1}".format(lat,lng),
                "pois":1,
                "coordtype":type}
        
        r = self.sendCmd('geocoder/v2/',data)
        resp = r.json()
        if resp["status"] == 0:
            cfgPara = resp["result"]
        else:
            cfgPara = ""
        ret =uTools.formatPostMsg(cfgPara)
        return ret
    

    #调用形式：routematrix([40.056878, 116.30815],[40.056878, 116.30815])
    #请求格式：http://api.map.baidu.com/direction/v1/routematrix?output=json&origins=origin1|orgin2&destinations=destination1|destination2&ak=E4805d16520de693a3fe707cdc962045 //origins=origin1|orgin2为请求的起点，destinations=destination1|destination2为请求的终点
    def routematrix(self,origins,destinations):
        #合法性检测，有0.0的情况，是非法
        exceptFlag = False
        for src in [origins,destinations]:
            for  item in src :
                for lxg in item:
                    if float(lxg)==0:
                        exceptFlag = True
                        break
                    if exceptFlag == True:
                        break
                if exceptFlag == True:
                    break
            if exceptFlag == True:
                break
        if exceptFlag == True:
            return 
            
        #url = BaiduMap.comUrl+"&from={0}&to={1}&coords={2}".format(_from,_to,_coords)
        data = {"origins"     :"|".join(map(lambda(x,y) : "{0},{1}".format(x,y) ,origins)),
                "destinations":"|".join(map(lambda(x,y) : "{0},{1}".format(x,y) ,destinations))
        }
        #print "routematrix:{0}".format(data)
        r = self.sendCmd('direction/v1/routematrix',data)
        resp = r.json()
        if resp["status"] == 0:
            ret = resp["result"]["elements"]
        else:
            ret = ""
        #print "输出：{0}".format(ret)
        return ret  
     
    def getAK(self):
        _ret =db.query("SELECT * FROM GlobalPara WHERE name ='baidumap_server' ORDER BY used_num")
        sel = _ret[0]
        ak = sel.value
        db.update("GlobalPara",where="name='baidumap_server' AND value=$ak",
                               vars=locals(),used_num=sel.used_num+1)
        return ak
        
    def releaseAK(self,ak):
        _ret =db.query("SELECT * FROM GlobalPara WHERE name ='baidumap_server' AND value='{0}'".format(ak))
        sel = _ret[0]
        id = sel.id
        db.update("GlobalPara",where="id=$id",
                               vars=locals(),used_num=sel.used_num-1)
        return

if __name__ == "__main__":
    db = web.database(
        dbn   ='mysql',
        host  ='localhost',
        port  =3306,
        user  ='root',
        passwd='qiuwen.19',
        db    ='app_iwaiter',
        charset='utf8'
    )
    bdmap = BaiduMap()
    #ret = bdmap.translate([[22.1639,109.23]],"gpsAngle","baiduAngle") 22.629650950966,
    ret = bdmap.routematrix([[25.704357946378,113.05569616926]],[[25.688977546966,113.03532076142]])
    print ret
    