# -*- coding: utf-8 -*-
import web,sys
import time,re
import datetime
import json
import product.iconfig as icfg
import config as cfg
import utility as uTools
reload(sys)
sys.setdefaultencoding("utf-8")
class LogStat:
    def __init__(self):
        templates_path =__file__.split(".py")[0]
        self.render = web.template.render(templates_path)
        
    def GET(self):
        data = web.input()
        act  = data.act.upper()
        openid = data.openid
        self.env =cfg.getEnvObj()
        ret = ""
        if act =="USER-STAT":
            ret = self.getUserStatMsg(openid,act,data)
        elif act =="MANAGER-STAT":
            ret = self.getUserStatMsg(openid,act,data)
        elif act =="USER-URL-STAT":
            ret = self.getUrlStatMsg(openid,act,data)
        elif act =="MANAGER-URL-STAT":
            ret = self.getUrlStatMsg(openid,act,data)
        return  ret

    def getUrlStatMsg(self,openid,act,data):
        #查询日期
        if data.has_key("fromDate"):
            fromDate = datetime.datetime.strptime(data.fromDate,"%Y-%m-%d") 
        else:
            #fromDate = datetime.date.today()-datetime.timedelta(days=180)
            fromDate = "2015-08-01"
        if data.has_key("toDate"):
            toDate = datetime.datetime.strptime(data.toDate,"%Y-%m-%d") 
        else:
            toDate = datetime.date.today()
        owner = "UserAccess" if act=="USER-URL-STAT" else "UserAccess_manager"
        
        cfgPara = urlStat(owner,fromDate,toDate) 
        cfgPara["openid"]=openid
        if  web.ctx.method=='GET':
            jdkSign = icfg.objWeixin.get_jdk_sign(self.env["url"])   
            _cfgPara = json.dumps(cfgPara,ensure_ascii=False)
            ret = self.render.url_access_stat(_cfgPara,jdkSign)
        else:
            ret = self._formatPostMsg(cfgPara)
        return ret

    def getUserStatMsg(self,openid,act,data):
        #查询日期
        if data.has_key("fromDate"):
            fromDate = datetime.datetime.strptime(data.fromDate,"%Y-%m-%d") 
        else:
            fromDate = datetime.date.today()-datetime.timedelta(days=5)
        if data.has_key("toDate"):
            toDate = datetime.datetime.strptime(data.toDate,"%Y-%m-%d") 
        else:
            toDate = datetime.date.today()
        owner   = "UserAccess" if act=="USER-STAT" else "UserAccess_manager"
        
        cfgPara = userStat(owner,fromDate,toDate)
        cfgPara["openid"]=openid
        if  web.ctx.method=='GET':
            jdkSign = icfg.objWeixin.get_jdk_sign(self.env["url"])
            _cfgPara = json.dumps(cfgPara,ensure_ascii=False)
            ret = self.render.user_access_stat(_cfgPara,jdkSign)
        else:
            ret = self._formatPostMsg(cfgPara)
        return ret
        
def logAccessUrl(openid,act):
    env = cfg.getEnvObj()
    now = datetime.datetime.now()
    fullpath = env["url"]
    s=r"http://[^/]+(\/[^\?]+)"
    m = re.match(s,fullpath)
    if m==None:
        return
    pathinfo = m.group(1)
    icfg.db.insert("UserAccess",domain   =web.ctx.homedomain,
                           fullpath =fullpath,
                           pathinfo =pathinfo+"?act="+act,
                           openid   =openid,
                           access_at=now,
                           access_month =now.strftime("%Y-%m"),
                           access_week  =(now+datetime.timedelta(days=6-now.weekday())).strftime("%Y-%m-%d"),
                           access_date  =now.strftime("%Y-%m-%d"),
                           access_hour  = now.hour)
                           
def urlStat(owner,fromDate,toDate):
    #urls = {}
    #_u2names = icfg.db.query("""SELECT * FROM GlobalPara WHERE owner='UserAccess'""")
    #for item in _u2names:
    #    urls[item.name]=item.value
    #    
    accessInfo = icfg.db.query("""SELECT pathinfo,GlobalPara.value AS urlName,access_week,COUNT(*) AS sum 
                                      FROM  UserAccess,GlobalPara
                                      WHERE access_date>='{0}' AND access_date<='{1}' AND
                                            LCASE(UserAccess.pathinfo) = GlobalPara.name AND
                                            GlobalPara.owner='{2}'
                                      GROUP BY  pathinfo,access_week
                                      ORDER BY access_week""".format(fromDate,toDate,owner))          
    url_stat = {unicode("合计").encode("utf-8"):{}}
    weeks =[unicode("合计").encode("utf-8")]
    order =[] #按顺序从大到小排序
    for item in accessInfo:
        if url_stat.has_key(item.urlName)==False:
            url_stat[item.urlName]={}
        week = item.access_week.strftime("%m/%d")
        url_stat[item.urlName][week] = item.sum
        
        if week not in weeks:
            weeks.append(week)
            #按星期统计访问总量
            _total = icfg.db.query("""SELECT COUNT(*) AS sum  FROM  UserAccess
                                      WHERE access_week ='{0}'""".format(item.access_week))
            url_stat[unicode("合计").encode("utf-8")][week] = _total[0].sum
    #分类统计
    _totals = icfg.db.query("""SELECT GlobalPara.value AS urlName,COUNT(*) AS sum 
                                  FROM  UserAccess,GlobalPara
                                  WHERE LCASE(UserAccess.pathinfo) = GlobalPara.name AND
                                        GlobalPara.owner='{0}' 
                                  GROUP BY  urlName
                                  ORDER BY  sum DESC""".format(owner))
    for item in _totals:
        url_stat[item.urlName][unicode("合计").encode("utf-8")] = item.sum
        order.append(item.urlName)
    _total = icfg.db.query("""SELECT COUNT(*) AS sum  FROM  UserAccess""")
    url_stat[unicode("合计").encode("utf-8")][unicode("合计").encode("utf-8")] = _total[0].sum
    
        
    cfgPara=dict(
        url_stat = url_stat,
        weeks    = weeks,
        order    = order,
        owner    = owner
    )
    return cfgPara   
      
      
def userStat(owner,fromDate,toDate): 
    accessInfo = icfg.db.query("""SELECT Customer.openid AS openid,nickname,access_date,COUNT(*) AS sum 
                                      FROM  UserAccess,Customer,GlobalPara
                                      WHERE access_date>='{0}' AND access_date<='{1}' AND
                                            Customer.openid = UserAccess.openid AND
                                            LCASE(UserAccess.pathinfo) =GlobalPara.name AND
                                            GlobalPara.owner      = '{2}' AND
                                            GlobalPara.value1          = 0
                                      GROUP BY UserAccess.openid,access_date
                                      ORDER BY access_date DESC""".format(fromDate,toDate,owner))
    user_stat={"actor":{}}
    dates=["total"]
    users={"actor":"活跃度".encode("utf-8")}
    order=["actor"] #访问量从大到小排序

    for item in accessInfo:
        if user_stat.has_key(item.openid)==False:
            user_stat[item.openid] ={}
        _date = item.access_date.strftime("%m/%d")
        user_stat[item.openid][_date]=item.sum
        users[item.openid] =item.nickname
        if user_stat["actor"].has_key(_date)==False:
            user_stat["actor"][_date] = 0
        user_stat["actor"][_date]+=1 #记录用户数
        if _date not in dates:#还没记录，加入
            dates.append(_date)
    _totals = icfg.db.query("""SELECT openid,COUNT(*) AS sum  
                                  FROM  UserAccess,GlobalPara
                                  WHERE LCASE(UserAccess.pathinfo) = GlobalPara.name AND
                                        GlobalPara.owner      = '{0}' AND
                                        GlobalPara.value1          = 0 
                                  GROUP BY openid
                                  ORDER BY sum DESC""".format(owner))
    for item in _totals:
        if user_stat.has_key(item.openid):#只处理已经有记录的用户信息
            user_stat[item.openid]["total"] = item.sum
            order.append(item.openid)
    user_stat["actor"]["total"]=len(order)-1
    cfgPara = dict(
        user_stat=user_stat,
        users  = users,
        dates  = dates,
        order  = order,
        owner  = owner
    )
    return cfgPara
    